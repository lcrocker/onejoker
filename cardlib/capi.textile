---
layout: cardlib
title: "CardLib C API"
---

h1. Using the library in your C code

C programs need only include the single header file @ojcardlib.h@, and link against the shared library (@libojcard.so@ on Linux, @ojcard.dll@ on Windows). The library will initialize itself properly, including properly seeding the random number generator. If you build the library yourself and link it statically, you will have to initialize the library yourself, like this:

{% highlight cpp %}
int main(int argc, char *argv[]) {
    oj_init_library(0);
    . . .
}
{% endhighlight %}

The argument 0 tells the library to seed the RNG from system entropy, which is what you want in most cases. If you pass a nonzero value, that will be used to seed the RNG, which will then generate a reproducible sequence sometimes useful for testing. It is safe to call this initialization function even if it has been called previously (as it would be by the shared library).

* ["Types":/onejoker/cardlib/capi_types.html]: Data types and structures used by the C API.
* ["Text functions":/onejoker/cardlib/capi_text.html]: Functions for input and output of card information as text.
* ["Card list functions":/onejoker/cardlib/capi_cardlist.html]: Functions for manipulating card lists.
* ["Combiner functions":/onejoker/cardlib/capi_combiner.html]: Functions for producing combinations of cards.
* ["Poker functions":/onejoker/cardlib/capi_poker.html]: Specialized functions for poker.
* ["Blackjack functions":/onejoker/cardlib/capi_blackjack.html]: Specialized functions for blackjack.
* ["Miscellaneous functions":/onejoker/cardlib/capi_misc.html]: Functions that don't fit elsewhere.
* ["Examples":/onejoker/cardlib/capi_examples.html]: Sample complete programs.
